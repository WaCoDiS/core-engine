openapi: "3.0.0"
info:
  version: 0.1.0
  title: WaCoDiS Schema Definitions
  description: |
    The data models for WaCoDiS
  termsOfService: https://wacodis.fbg-hsbo.de/
  contact:
    name: WaCoDiS Dev Team
    email: m.rieke@52north.org
    url: https://github.com/WaCoDiS
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /:
    get:
      description: N/A
      responses:
        default:
          description: N/A
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    AbstractDataEnvelope:
      required:
        - sourceType
      discriminator:
        propertyName: sourceType
      properties:
        sourceType:
          type: string
          enum: ['SensorWebDataEnvelope', 'CopernicusDataEnvelope', 'GdiDeDataEnvelope']
          description: |
            shall be used to determine the responsible data backend
        areaOfInterest:
          type: object
          required:
            - extent
          properties:
            extent:
              description: |
                the coordinates, using EPSG:4326, (in analogy to GeoJSON bbox) in the order
                "southwesterly point followed by more northeasterly point". Schema
                is [minLon, minLat, maxLon, maxLat]
              type: array
              minItems: 4
              maxItems: 4
              items:
                type: number
                format: float
                minimum: -180.0
                maximum: 180.0
        timeFrame:
          type: object
          description:
            time frame the dataset covers
          required:
            - startTime
            - endTime
          properties:
            startTime:
              type: string
              format: date-time
              description: |
                the beginning of the time frame
            endTime:
              type: string
              format: date-time
              description: |
                the ending of the time frame
          format: date-time
        created:
          type: string
          format: date-time
          description: |
            time on which the dataset was created or became available
        modified:
          type: string
          format: date-time
          description: |
            time on which the dataset was modified last
    SensorWebDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - offering
          - featureOfInterest
          - observedProperty
          - procedure
          - serviceUrl
          properties:
            serviceUrl:
              type: string
            offering:
              type: string
            featureOfInterest:
              type: string
            observedProperty:
              type: string
            procedure:
              type: string
    CopernicusDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - datasetId
          - satellite
          - cloudCoverage
          - portal
          properties:
            datasetId:
              description:
                the id of the
            satellite:
              type: string
              enum: [sentinel-1, sentinel-2, sentinel-3]
            cloudCoverage:
              type: number
              format: float
            portal:
              type: string
              enum: [Code-DE, Sentinel-Hub]
    GdiDeDataEnvelope:
      allOf:
        - $ref: '#/components/schemas/AbstractDataEnvelope'
        - type: object
          required:
          - recordRefId
          properties:
            catalougeUrl:
              description: |
                URL of the GDI-DE catalogue
              type: string
            recordRefId:
              description: |
                the id of the dataset within the GDI-DE catalogue
              type: string
    AbstractResource:
      properties:
        url:
          type: string
        method:
          type: string
          enum: ['GetResource', 'PostResource']
      discriminator:
        propertyName: method
      required:
        - method
        - url
    PostResource:
      allOf:
        - $ref: '#/components/schemas/AbstractResource'
        - type: object
          required:
          - body
          - contentType
          properties:
            body:
              type: string
            contentType:
              type: string
    GetResource:
      allOf:
        - $ref: '#/components/schemas/AbstractResource'
    PaginatedResponse:
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
    PaginatedWacodisJobDefinitionResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          required:
          - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/WacodisJobDefinition'
    WacodisJobDefinition:
      required:
        - name
        - areaOfInterest
        - processingTool
        - inputs
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: |
            a human friendly short name
        description:
          type: string
          description: |
            a more verbose description of the WacodisJobDefinitions (e.g. purpose, inputs, ...)
        useCase:
          type: string
          description: |
            A generic use case reference. This can be used to refer to the use cases identified during the
            initial phase of WaCoDiS
        created:
          type: string
          format: date-time
        lastFinishedExecution:
          type: string
          format: date-time
        status:
          type: string
          enum: ['waiting', 'running', 'deleted']
        execution:
          type: object
          description: |
                if present, this describe the execution pattern of a WacodisJobDefinition. if not present,
                the WacodisJobDefinition is treated as a one-time execution.
                Only one of the properties shall be provided.
          properties:
            pattern:
              type: string
              description: |
                The format follows the cron syntax with the first five fields
                (see: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07)
            event:
              type: object
              description: |
                the execution is scheduled by the occurence of an event (e.g. new data available); WIP - format to be defined.
        temporalCoverage:
          type: object
          description: |
            definition of temporal coverage for which input data (see SubsetDefinitions) is of relevancy.
            Only one of the properties shall be provided.
          properties:
            duration:
              type: string
              format: duration
              description: |
                the duration in ISO8601 duration format (https://en.wikipedia.org/wiki/ISO_8601#Durations)
                the processing component will treat the duration as backwards. A duration of "P1M" will cover the last month before execution
            previousExecution:
              type: boolean
              description: |
                input data coverage since the last execution of the job. This is only valid in combination with pattern execution
        areaOfInterest:
          type: object
          required:
            - extent
          properties:
            extent:
              description: |
                the coordinates, using EPSG:4326, (in analogy to GeoJSON bbox) in the order
                "southwesterly point followed by more northeasterly point". Schema
                is [minLon, minLat, maxLon, maxLat]
              type: array
              minItems: 4
              maxItems: 4
              items:
                type: number
                format: float
                minimum: -180.0
                maximum: 180.0
        processingTool:
          type: string
          description: |
            the processingTool ID as provided by the WPS tool wrapper
        inputs:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/AbstractSubsetDefinition'
    AbstractSubsetDefinition:
      properties:
        sourceType:
          type: string
          # the discriminator needs to have the same value as the schema objects name. this works at least
          # with spring generator and jackson deserialization
          enum: ['SensorWebSubsetDefinition', 'CopernicusSubsetDefinition', 'CatalogueSubsetDefinition']
          description: |
            shall be used to determine the responsible data backend
        identifier:
          type: string
      discriminator:
        propertyName: sourceType
      required:
        - sourceType
        - identifier
    SensorWebSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - serviceUrl
          - offering
          - featureOfInterest
          - observedProperty
          - procedure
          properties:
            serviceUrl:
              type: string
            offering:
              type: string
            featureOfInterest:
              type: string
            observedProperty:
              type: string
            procedure:
              type: string
    CopernicusSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - satellite
          - maximumCloudCoverage
          properties:
            satellite:
              type: string
              enum: [sentinel-1, sentinel-2, sentinel-3]
            maximumCloudCoverage:
              type: number
              format: float
    CatalogueSubsetDefinition:
      allOf:
        - $ref: '#/components/schemas/AbstractSubsetDefinition'
        - type: object
          required:
          - datasetIdentifier
          - serviceUrl
          properties:
            datasetIdentifier:
              description: |
                the id of the dataset within the catalogue
              type: string
            serviceUrl:
              description: |
                the base URL of the catalogue
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
